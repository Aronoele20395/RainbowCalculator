{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\eleon\\\\Desktop\\\\PROGRAMMAZIONE\\\\REACT-NATIVE\\\\SliderColorPickerExample\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { SliderHuePicker, SliderSaturationPicker, SliderValuePicker } from 'react-native-slider-color-picker';\nimport AppRegistry from \"react-native-web/dist/exports/AppRegistry\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ColorPicker } from 'react-native-color-picker';\nimport tinycolor from 'tinycolor2';\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width;\n\nvar SliderColorPickerExample = function (_React$Component) {\n  _inherits(SliderColorPickerExample, _React$Component);\n\n  var _super = _createSuper(SliderColorPickerExample);\n\n  function SliderColorPickerExample(props) {\n    var _this;\n\n    _classCallCheck(this, SliderColorPickerExample);\n\n    _this = _super.call(this, props);\n\n    _this.changeColor = function (colorHsvOrRgb, resType) {\n      if (resType === 'end') {\n        _this.setState({\n          oldColor: tinycolor(colorHsvOrRgb).toHexString()\n        });\n      }\n    };\n\n    _this.hueMap = function (color) {\n      alert(\"Color selected: \" + color);\n    };\n\n    _this.state = {\n      oldColor: \"#FF7700\"\n    };\n    return _this;\n  }\n\n  _createClass(SliderColorPickerExample, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var oldColor = this.state.oldColor;\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: {\n          marginHorizontal: 24,\n          marginTop: 80,\n          height: 12,\n          width: width - 48\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }, React.createElement(SliderHuePicker, {\n        ref: function ref(view) {\n          _this2.sliderHuePicker = view;\n        },\n        oldColor: oldColor,\n        trackStyle: [{\n          height: 12,\n          width: width - 48\n        }],\n        thumbStyle: styles.thumb,\n        useNativeDriver: true,\n        onColorChange: this.changeColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }\n      })), React.createElement(View, {\n        style: {\n          marginHorizontal: 24,\n          marginTop: 20,\n          height: 12,\n          width: width - 48\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }\n      }, React.createElement(SliderSaturationPicker, {\n        ref: function ref(view) {\n          _this2.sliderSaturationPicker = view;\n        },\n        oldColor: oldColor,\n        trackStyle: [{\n          height: 12,\n          width: width - 48\n        }],\n        thumbStyle: styles.thumb,\n        useNativeDriver: true,\n        onColorChange: this.changeColor,\n        style: {\n          height: 12,\n          borderRadius: 6,\n          backgroundColor: tinycolor({\n            h: tinycolor(oldColor).toHsv().h,\n            s: 1,\n            v: 1\n          }).toHexString()\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }\n      })), React.createElement(View, {\n        style: {\n          marginHorizontal: 24,\n          marginTop: 20,\n          height: 12,\n          width: width - 48\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }\n      }, React.createElement(SliderValuePicker, {\n        ref: function ref(view) {\n          _this2.sliderValuePicker = view;\n        },\n        oldColor: oldColor,\n        minimumValue: 0.02,\n        step: 0.05,\n        trackStyle: [{\n          height: 12,\n          width: width - 48\n        }],\n        trackImage: require('react-native-slider-color-picker/brightness_mask.png'),\n        thumbStyle: styles.thumb,\n        onColorChange: this.changeColor,\n        style: {\n          height: 12,\n          borderRadius: 6,\n          backgroundColor: 'black'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }\n      })), React.createElement(View, {\n        style: {\n          marginHorizontal: 24,\n          marginTop: 20,\n          height: 400,\n          width: width - 48\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }\n      }, React.createElement(ColorPicker, {\n        onColorSelected: function onColorSelected() {\n          return _this2.hueMap;\n        },\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return SliderColorPickerExample;\n}(React.Component);\n\nexport { SliderColorPickerExample as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\"\n  },\n  thumb: {\n    width: 20,\n    height: 20,\n    borderColor: 'white',\n    borderWidth: 1,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowRadius: 2,\n    shadowOpacity: 0.35\n  }\n});","map":{"version":3,"sources":["C:/Users/eleon/Desktop/PROGRAMMAZIONE/REACT-NATIVE/SliderColorPickerExample/App.js"],"names":["React","SliderHuePicker","SliderSaturationPicker","SliderValuePicker","ColorPicker","tinycolor","Dimensions","get","width","SliderColorPickerExample","props","changeColor","colorHsvOrRgb","resType","setState","oldColor","toHexString","hueMap","color","alert","state","styles","container","marginHorizontal","marginTop","height","view","sliderHuePicker","thumb","sliderSaturationPicker","borderRadius","backgroundColor","h","toHsv","s","v","sliderValuePicker","require","flex","Component","StyleSheet","create","alignItems","borderColor","borderWidth","shadowColor","shadowOffset","shadowRadius","shadowOpacity"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n    SliderHuePicker,\n    SliderSaturationPicker,\n    SliderValuePicker,\n} from 'react-native-slider-color-picker';\nimport {\n    AppRegistry,\n    Dimensions,\n    StyleSheet,\n    Text,\n    View,\n} from 'react-native';\nimport { ColorPicker } from 'react-native-color-picker';\nimport tinycolor from 'tinycolor2';\n \nconst {\n    width,\n} = Dimensions.get('window');\n \nexport default class SliderColorPickerExample extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            oldColor: \"#FF7700\",\n        };\n    }\n \n    changeColor = (colorHsvOrRgb, resType) => {\n        if (resType === 'end') {\n            this.setState({\n                oldColor: tinycolor(colorHsvOrRgb).toHexString(),\n            });\n        }\n    }\n\n    hueMap = (color) => {\n        alert(`Color selected: ${color}`)\n    }\n \n    render() {\n        const {\n            oldColor,\n        } = this.state;\n \n        return (\n            <View style={styles.container}>\n                <View style={{marginHorizontal: 24, marginTop: 80, height: 12, width: width - 48}}>\n                    <SliderHuePicker\n                        ref={view => {this.sliderHuePicker = view;}}\n                        oldColor={oldColor}\n                        trackStyle={[{height: 12, width: width - 48}]}\n                        thumbStyle={styles.thumb}\n                        useNativeDriver={true}\n                        onColorChange={this.changeColor}\n                    />\n                </View>\n                <View style={{marginHorizontal: 24, marginTop: 20, height: 12, width: width - 48}}>\n                    <SliderSaturationPicker\n                        ref={view => {this.sliderSaturationPicker = view;}}\n                        oldColor={oldColor}\n                        trackStyle={[{height: 12, width: width - 48}]}\n                        thumbStyle={styles.thumb}\n                        useNativeDriver={true}\n                        onColorChange={this.changeColor}\n                        style={{height: 12, borderRadius: 6, backgroundColor: tinycolor({h: tinycolor(oldColor).toHsv().h, s: 1, v: 1}).toHexString()}}\n                    />\n                </View>\n                <View style={{marginHorizontal: 24, marginTop: 20, height: 12, width: width - 48}}>\n                    <SliderValuePicker\n                        ref={view => {this.sliderValuePicker = view;}}\n                        oldColor={oldColor}\n                        minimumValue={0.02}\n                        step={0.05}\n                        trackStyle={[{height: 12, width: width - 48}]}\n                        trackImage={require('react-native-slider-color-picker/brightness_mask.png')}\n                        thumbStyle={styles.thumb}\n                        onColorChange={this.changeColor}\n                        style={{height: 12, borderRadius: 6, backgroundColor: 'black'}}\n                    />\n                </View>\n                <View style={{marginHorizontal: 24, marginTop: 20, height: 400, width: width - 48}}>\n                    <ColorPicker\n                        onColorSelected={() => this.hueMap}\n                        style={{flex: 1}}\n                    />\n                </View>\n            </View>\n        );\n    }\n}\n \nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: \"center\",\n    },\n    thumb: {\n        width: 20,\n        height: 20,\n        borderColor: 'white',\n        borderWidth: 1,\n        borderRadius: 10,\n        shadowColor: 'black',\n        shadowOffset: {\n            width: 0,\n            height: 2\n        },\n        shadowRadius: 2,\n        shadowOpacity: 0.35,\n    },\n});"]},"metadata":{},"sourceType":"module"}